{--
bubbleSort - це основна функція, яка викликається для 
сортування списку. Вона викликає допоміжну функцію bubbleSort'
та передає їй список і його довжину.
--}
bubbleSort :: (Ord a) => [a] -> [a]
bubbleSort list = bubbleSort' list (length list)
{--
bubbleSort' - це функція, яка реалізує алгоритм сортування бульбашкою.
Вона викликається зі списком та залишковою довжиною для сортування.
Якщо залишкова довжина дорівнює 0, це означає, що ми завершили всі
проходження через список і можемо повернути відсортований список.
У іншому випадку ми викликаємо bubbleSort' з результатом проходження
через функцію bubblePass і зменшеною залишковою довжиною.
--}
bubbleSort' :: (Ord a) => [a] -> Int -> [a]
bubbleSort' list 0 = list
bubbleSort' list n = bubbleSort' (bubblePass list) (n - 1)
{--
bubblePass - це функція, яка виконує один прохід через список, 
порівнюючи сусідні елементи і обмінюючи їх, якщо вони в неправильному 
порядку. Функція приймає список і повертає новий список, де сусідні 
елементи вже в правильному порядку. Функція використовується в 
bubbleSort' для кожного проходження через список.
--}
bubblePass :: (Ord a) => [a] -> [a]
bubblePass [] = []   -- Якщо список порожній, нічого не робимо.
bubblePass [x] = [x] -- Список з одного елемента, вже відсортований.
{-- 
Якщо список має принаймні два елементи, використовуємо зразок
(pattern matching) для розділення його на перший елемент (x1),
другий елемент (x2) і залишок списку (xs).
--}
bubblePass (x1 : x2 : xs)
  -- Якщо x1 більше x2, міняємо їх місцями.
  | x1 > x2 = x2 : bubblePass (x1 : xs)
  -- Якщо x1 менше або рівне x2, то залишаємо їх у поточному порядку.
  | otherwise = x1 : bubblePass (x2 : xs)


-- Приклад використання:
main :: IO ()
main = do
  let unsortedList = [4, 2, 7, 1, 9, 5, 3]
  putStrLn "Unsorted List: "
  print unsortedList

  let sortedList = bubbleSort unsortedList
  putStrLn "Sorted List: "
  print sortedList
